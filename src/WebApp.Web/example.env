# EXAMPLE.ENV FILE:
# This file serves as a template for creating your actual .env file. 
# Note that it uses a naming convention that matches the appsettings.json file structure.

# The options for quoting values are:
# "" double: can have everything: interpolated variables, plus whitespace, escaped chars, and byte code chars
# '' single: can have whitespace, but no interpolation, no escaped chars, no byte code chars -- notably not even escaped single quotes inside -- single quoted values are for when you want truly raw values
# unquoted: can have interpolated variables, but only inline whitespace, and no quote chars, no escaped chars, nor byte code chars

# How to recover the value using Environment.GetEnvironmentVariable:
# Console.WriteLine(Environment.GetEnvironmentVariable("ConnectionStrings__DefaultConnection"));
# O usando IConfiguration:
# Console.WriteLine(_configuration.GetConnectionString("DefaultConnection"));
# Console.WriteLine(_configuration["ConnectionStrings:DefaultConnection"]);

# A Note about Production and the Purpose of This Library
# You should not be using a .env file in production. The purpose of this library is to enable easy local development.
# When the application is deployed into production, actual env vars should be used, not a static .env file!
########################################################################################

# Connection Strings database
ConnectionStrings__DefaultConnection = Data Source=(DESCRIPTION=(ADDRESS_LIST= (ADDRESS=(PROTOCOL=TCP)(HOST=255.255.255.255)(PORT=80)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=XE))); User ID=system;Password=password123

# Admin User Settings
AdminSettings__Email=admin@example.com
AdminSettings__Password=Admin123!
AdminSettings__Name=John
AdminSettings__LastName=Doe
AdminSettings__IdentificationNumber=123456789
AdminSettings__Username=admin1
AdminSettings__Dependency=ADMINISTRACION